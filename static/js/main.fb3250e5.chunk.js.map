{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","visibleGoods","goods","sort","good1","good2","localeCompare","length","reverse","getReorderedGoods","className","type","classnames","ALPHABET","onClick","LENGTH","prevIsReversed","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAmCE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAmBMC,EA7CD,SACLC,EADK,GAGJ,IADCH,EACF,EADEA,SAAUH,EACZ,EADYA,WAENK,EAAY,YAAOC,GAiBzB,OAfAD,EAAaE,MAAK,SAACC,EAAOC,GACxB,OAAQN,GACN,KAAK,EACH,OAAOK,EAAME,cAAcD,GAC7B,KAAK,EACH,OAAOD,EAAMG,OAASF,EAAME,OAC9B,QACE,OAAO,MAITX,GACFK,EAAaO,UAGRP,EAwBcQ,CACnBhB,EACA,CAAEM,WAAUH,eAGd,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYb,IAAaP,EAASqB,WAEtCC,QA3Be,WACrBd,EAAYR,EAASqB,WAoBjB,iCAWA,wBACEF,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYb,IAAaP,EAASuB,SAEtCD,QA1Ca,WACnBd,EAAYR,EAASuB,SAmCjB,4BAWA,wBACEJ,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAahB,IAEjBkB,QA7CQ,WACdjB,GAAc,SAAAmB,GAAc,OAAKA,MAsC7B,sBAUEpB,GAAcG,IAAaP,EAASM,OACpC,wBACEa,KAAK,SACLD,UAAU,4BACVI,QAjDI,WACZd,EAAYR,EAASM,MACrBD,GAAc,IA4CR,sBAUJ,6BACGI,EAAagB,KAAI,SAACC,GAAD,OAChB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YC7HjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.fb3250e5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classnames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case 1:\n        return good1.localeCompare(good2);\n      case 2:\n        return good1.length - good2.length;\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const sortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const sortByAlphabet = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const reverse = () => {\n    setIsReversed(prevIsReversed => !prevIsReversed);\n  };\n\n  const reset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  const visibleGoods = getReorderedGoods(\n    goodsFromServer,\n    { sortType, isReversed },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classnames(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={sortByAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classnames(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classnames(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n        {(isReversed || sortType !== SortType.NONE) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good: string) => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}